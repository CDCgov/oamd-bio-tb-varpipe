nextflow_process {

    name "Test Process TRIMMOMATIC"
    script "../main.nf"
    process "TRIMMOMATIC"

    tag "modules"
    tag "modules_phcore"
    tag "trimmomatic"

    test("Single-Read") {
        config "./nextflow_SE.config"
        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id: 'test', single_end:true ],
                    [
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.trimmed_reads != null },
                { assert process.out.trimmed_reads.get(0).get(1) ==~ ".*.SE.paired.trim.fastq.gz" },
                { assert process.out.out_log.get(0).get(1) ==~ ".*.log" },
                { assert snapshot(process.out.trimmed_reads,
                                  process.out.trim_log,
                                  process.out.summary,
                                  process.out.versions
                                  ).match() }
            )
        }
    }

    test("Paired-Reads") {
        config "./nextflow_PE.config"
        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id: 'test', single_end:false ],
                    [
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert process.out.trimmed_reads != null },
                { assert process.out.trimmed_reads.get(0).get(1).get(0) ==~ ".*.paired.trim_1.fastq.gz" },
                { assert process.out.trimmed_reads.get(0).get(1).get(1) ==~ ".*.paired.trim_2.fastq.gz" },
                { assert process.out.out_log.get(0).get(1) ==~ ".*.log" },
                { assert snapshot(process.out.trimmed_reads,
                                  process.out.trim_log,
                                  process.out.summary,
                                  process.out.versions
                                  ).match() }
            )
        }
    }

    test("No Adaptors") {

        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id: 'test', single_end:false ],
                    [
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.failed }
            )
        }
    }

    test("Single-Read - stub") {
        options "-stub"
        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id: 'test', single_end:true ],
                    [
                        file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
