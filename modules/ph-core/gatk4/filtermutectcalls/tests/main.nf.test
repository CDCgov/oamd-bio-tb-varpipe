nextflow_process {

    name "Test Process GATK4_FILTERMUTECTCALLS"
    script "../main.nf"
    process "GATK4_FILTERMUTECTCALLS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_phcore"
    tag "gatk4"
    tag "gatk4/filtermutectcalls"

    test("human - vcf - base") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.tbi'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.stats'),
                    [],
                    [],
                    [],
                    []
                    ]

                input[1] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta')
                    ]
                input[2] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai')
                    ]
                input[3] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.dict')
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions_base") },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.2") },
                { assert path(process.out.tbi.get(0).get(1)).linesGzip.toString().contains("TBI")},
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0]).match() }
            )
        }

    }

    test("human - vcf - with-files") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.tbi'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.stats'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/test_test2_paired_mutect2_calls.artifact-prior.tar.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/test_test2_paired.segmentation.table'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/test_test2_paired.contamination.table'),
                    []
                    ]

                input[1] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta')
                    ]
                input[2] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai')
                    ]
                input[3] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.dict')
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions_with-files") },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.2") },
                { assert path(process.out.tbi.get(0).get(1)).linesGzip.toString().contains("TBI")},
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0..5]).match() }
            )
        }

    }

    test("human - vcf - use-val") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.tbi'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.stats'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/test_test2_paired_mutect2_calls.artifact-prior.tar.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/test_test2_paired.segmentation.table'),
                    [],
                    '20.0'
                    ]

                input[1] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta')
                    ]
                input[2] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai')
                    ]
                input[3] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.dict')
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions_use-val") },
                { assert path(process.out.vcf.get(0).get(1)).linesGzip.contains("##fileformat=VCFv4.2") },
                { assert path(process.out.tbi.get(0).get(1)).linesGzip.toString().contains("TBI")},
                { assert snapshot(file(process.out.stats.get(0).get(1)).readLines()[0]).match() }
            )
        }

    }

    test("human - vcf - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.tbi'),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/illumina/gatk/paired_mutect2_calls/test_test2_paired_mutect2_calls.vcf.gz.stats'),
                    [],
                    [],
                    [],
                    []
                    ]

                input[1] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta')
                    ]
                input[2] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.fasta.fai')
                    ]
                input[3] = [ [ id:'genome' ], // meta map
                        file(params.nfcore_modules_testdata_base_path + '/genomics/homo_sapiens/genome/chr21/sequence/genome.dict')
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
