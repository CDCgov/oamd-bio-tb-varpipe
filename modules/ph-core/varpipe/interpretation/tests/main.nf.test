nextflow_process {

    name "Test Process VARPIPE_INTERPRETATION"
    script "../main.nf"
    process "VARPIPE_INTERPRETATION"

    tag "modules"
    tag "modules_phcore"
    tag "varpipe"
    tag "varpipe/interpretation"

    test("varpipe interpret report [stats] [coverage] [final annotation] [variants]") {

        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/summary.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/test_structural_variants.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/annotation/test_DR_loci_annotation.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/test_target_region_coverage.txt')
                ]
                input[1] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/reportable.txt')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("varpipe interpret report [stats] [coverage] [final annotation] [variants] -stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/summary.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/test_structural_variants.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/annotation/test_DR_loci_annotation.txt'),
                    file(params.modules_testdata_base_path + '/genomics/tuberculosis/coverage/test_target_region_coverage.txt')
                ]
                input[1] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/reportable.txt')
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
