nextflow_process {

    name "Test Process CAT_FASTQ"
    script "../main.nf"
    process "CAT_FASTQ"

    tag "modules"
    tag "modules_phcore"
    tag "cat"
    tag "cat/fastq"

    test("test_cat_fastq_single_end") {

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_paired_end") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_single_end_same_name") {

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_paired_end_same_name") {

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_single_end_single_file") {

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_single_end - stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_paired_end - stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_single_end_same_name - stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_paired_end_same_name - stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_fastq_single_end_single_file - stub") {

        options "-stub"

        when {
            process {
                """
                // Prepare input data
                input[0] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.nfcore_modules_testdata_base_path + '/genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)]
                ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
