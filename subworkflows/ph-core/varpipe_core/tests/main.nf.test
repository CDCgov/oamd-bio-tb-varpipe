nextflow_workflow {

    name "Test Subworkflow VARPIPE_CORE"
    script "../main.nf"
    workflow "VARPIPE_CORE"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_phcore"
    tag "subworkflows/varpipe_core"
    tag "subworkflows/varpipe_processbam"
    tag "subworkflows/varpipe_targetedvariants"
    tag "subworkflows/varpipe_allvariants"
    tag "cat/fastq"
    tag "trimmomatic"
    tag "picard/buildbamindex"
    tag "picard/markduplicates"
    tag "picard/samformatconverter"
    tag "picard/sortsam"
    tag "picard/createsequencedictionary"
    tag "samtools/faidx"
    tag "samtools/depth"
    tag "samtools/view"
    tag "bwa/index"
    tag "varpipe/bwamem"
    tag "gatk4/leftalignandtrimvariants"
    tag "gatk4/mutect2"
    tag "gatk4/filtermutectcalls"
    tag "varpipe/snpeff"
    tag "varpipe/parseannotations"
    tag "varpipe/createannotations"
    tag "varpipe/coverageanalysis"
    tag "varpipe/structuralvariants"
    tag "varpipe/report"
    tag "varpipe/interpretation"
    tag "varpipe/lineage"
    tag "varpipe/pdf"
    tag "varpipe/tar"

    setup {
        run("CAT_FASTQ") {
            script "modules/ph-core/cat/fastq/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_1.part_001.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_2.part_001.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_1.part_002.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_2.part_002.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_1.part_003.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_2.part_003.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_1.part_004.fastq.gz"),
                    file(params.modules_testdata_base_path + "/genomics/tuberculosis/fastqs/SRR24827267_2.part_004.fastq.gz")
                    ]
                ])
                """
            }
        }
    }

    test("varpipe-core subworkflow test [paired-end]") {

        when {
            params {
                date = "TEST_DATESTAMP"
                keepfiles = false\
            }
            workflow {
                """
                input[0] = CAT_FASTQ.out.reads
                input[1] = params.date
                input[2] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/ref2.fa')
                input[3] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/amp_bed.txt')
                input[4] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/bed_1.txt')
                input[5] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/bed_2.txt')
                input[6] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/BED.txt')
                input[7] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/mutation_loci.txt')
                input[8] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/intervals.bed')
                input[9] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/reportable.txt')
                input[10] = file(params.modules_testdata_base_path + '/genomics/tuberculosis/genome/kb/varpipe/lineage_markers.txt')
                input[11] = 'NC_000962'
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
